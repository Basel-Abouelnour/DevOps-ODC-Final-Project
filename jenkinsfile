pipeline {
    agent any

    environment {
        REPO_URL = 'git@github.com:Basel-Abouelnour/DevOps-ODC-Final-Project.git' 
        BRANCH = 'main'                                    
        LOCAL_REPO_DIR = '/var/lib/jenkins/workspace/The-Weather-App' 
        DOCKER_IMAGE ='baselabouelnour/devops-odc-final-project'
    }

    stages {
        //preparing the working repository
        stage('Check Repo Status') {
            steps {
                script {
                    // Ensure the local repo exists; clone if it doesn't
                    if (!fileExists("${LOCAL_REPO_DIR}/.git")) {
                        echo "Local repository does not exist. Cloning..."
                        sh "git clone ${REPO_URL} ${LOCAL_REPO_DIR}"
                    } else {
                        echo "Local repository exists. Fetching updates..."
                        dir(LOCAL_REPO_DIR) {
                            sh "git fetch origin"
                        }
                    }
                }
            }
        }
        stage('Compare and Pull') {
            steps {
                script {
                    dir(LOCAL_REPO_DIR) {
                        // Check if the local repo is up-to-date
                        def localCommit = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
                        def remoteCommit = sh(script: "git rev-parse origin/${BRANCH}", returnStdout: true).trim()

                        if (localCommit != remoteCommit) {
                            echo "Local repo is outdated. Pulling changes..."
                            sh "git pull origin ${BRANCH}"
                        } else {
                            echo "Local repo is up-to-date."
                        }
                    }
                }
            }
        }
    
    
        //preparing and pushin the Docker Image
        stage('Build A Docker Image') {
            steps {
               script{
                   sh 'ls'
                   sh 'pwd'
                   echo "Building Docker Image....."
                   sh "docker build -t ${DOCKER_IMAGE} ."
               }
            }
        }
        stage('Push to Docker Hub') {
           steps{
               script{
                   echo "Logging in to Docker Hub"
                   withCredentials([usernamePassword(
                        credentialsId: 'b9aaad60-a113-4e81-b583-ec9d9b09f8fb', // The ID of the credentials
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASSWORD'
                    )]) {
                        sh """
                        echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USER} --password-stdin
                        docker push ${DOCKER_IMAGE}
                        """
                    }
               }
           }
        }
        
        
    }
}

